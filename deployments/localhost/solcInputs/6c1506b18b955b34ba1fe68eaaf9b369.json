{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// 1. Pragma\npragma solidity ^0.8.7;\n// 2. Imports\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {PriceConverter} from \"./PriceConverter.sol\";\n\n// 3. Interfaces, Libraries, Contracts\nerror FundMe__NotOwner();\n\n/**@title A sample Funding Contract\n * @author Patrick Collins\n * @notice This contract is for creating a sample funding contract\n * @dev This implements price feeds as our library\n */\ncontract FundMe is Context {\n    // Type Declarations\n    using PriceConverter for uint256;\n\n    // State variables\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\n    uint256 public fundingGoal = 5000 * 10 ** 18;\n    address private i_owner;\n    address[] private s_funders;\n    bool private goalReached;\n    mapping(address => uint256) private s_addressToAmountFunded;\n    mapping(address => bool) private s_refunded;\n    AggregatorV3Interface private s_priceFeed;\n\n    // Events\n    event RefundAll(address owner, uint256 amount);\n    event Withdraw(address owner, uint256 amount);\n    event Refund(address funder, uint256 amount);\n    event OwnerChanged(address from, address to);\n    event Fund(address funder, uint amount);\n    event GoalReached(uint256 amount);\n\n    // Modifiers\n    modifier onlyOwner() {\n        // require(msg.sender == i_owner);\n        if (_msgSender() != i_owner) revert FundMe__NotOwner();\n        _;\n    }\n\n    /**\n     * @dev this modifier is for \"refund\" and \"customRefund\" functions\n     */\n    modifier refundRequires() {\n        require(!goalReached, \"Refunds are not available\");\n        require(!s_refunded[_msgSender()], \"Refund already processed\");\n        require(\n            s_addressToAmountFunded[_msgSender()] > 0,\n            \"No funds to refund\"\n        );\n        _;\n    }\n\n    // Functions Order:\n    //// constructor\n    //// receive\n    //// fallback\n    //// external\n    //// public\n    //// internal\n    //// private\n    //// view / pure\n\n    constructor(address priceFeed) {\n        s_priceFeed = AggregatorV3Interface(priceFeed);\n        i_owner = _msgSender();\n    }\n\n    /// @notice Funds of our contract based on the ETH/USD price\n    function fund() public payable {\n        require(\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\n            \"You need to spend more ETH!\"\n        );\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \"You need to spend more ETH!\");\n        s_refunded[_msgSender()] = false;\n        s_addressToAmountFunded[_msgSender()] += msg.value;\n        s_funders.push(_msgSender());\n        emit Fund(_msgSender(), msg.value);\n\n        checkGoalReached();\n    }\n\n    /**\n        @notice change the ownership\n    *   @param newOwner address\n    */\n    function changeOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0), \"change owner to zero address\");\n\n        i_owner = newOwner;\n\n        emit OwnerChanged(_msgSender(), newOwner);\n    }\n\n    /**\n        @dev chack that goal does not reached and the msg.sender did not refund befor then refund\n    */\n    function refund() public refundRequires {\n        uint256 refundAmount = s_addressToAmountFunded[_msgSender()];\n        s_addressToAmountFunded[_msgSender()] = 0;\n        s_refunded[_msgSender()] = true;\n\n        (bool success, ) = _msgSender().call{value: refundAmount}(\"\");\n        require(success, \"Transfer failed\");\n\n        emit Refund(_msgSender(), refundAmount);\n    }\n\n    /**\n        @notice refund with custom amount of fund\n    */\n    function customRefund(uint256 amount) public payable refundRequires {\n        require(\n            amount.getConversionRate(s_priceFeed) >= 10 * 10 ** 18,\n            \"you need to choose more fund\"\n        );\n        require(\n            amount == s_addressToAmountFunded[_msgSender()],\n            \"please call refund function\"\n        );\n        s_addressToAmountFunded[_msgSender()] =\n            s_addressToAmountFunded[_msgSender()] -\n            amount;\n        (bool success, ) = _msgSender().call{value: amount}(\"\");\n        require(success, \"Transfer failed\");\n\n        emit Refund(_msgSender(), amount);\n    }\n\n    /**\n        @notice refund all of funds in a loop\n     */\n    function refundAll() public onlyOwner {\n        // for gas optimization\n        address[] memory funders = s_funders;\n        // get all of the accounts and refund them\n        uint256 refundAmount;\n        for (uint256 i = 0; i < funders.length; i++) {\n            address funder = funders[i];\n            if (!s_refunded[funder]) {\n                uint256 amount = s_addressToAmountFunded[funder];\n                s_addressToAmountFunded[funder] = 0;\n                s_refunded[funder] = true;\n                payable(funder).transfer(amount);\n\n                refundAmount += amount;\n            }\n        }\n\n        emit RefundAll(i_owner, refundAmount);\n    }\n\n    function withdraw() public onlyOwner {\n        resetFunders();\n        uint256 contractBalance = address(this).balance;\n        // Transfer vs call vs Send\n        // payable(msg.sender).transfer(contractBalance);\n        (bool success, ) = i_owner.call{value: contractBalance}(\"\");\n        require(success, \"Transfer failed\");\n        emit Withdraw(i_owner, contractBalance);\n    }\n\n    function cheaperWithdraw() public onlyOwner {\n        address[] memory funders = s_funders;\n        // mappings can't be in memory, sorry!\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < funders.length;\n            funderIndex++\n        ) {\n            address funder = funders[funderIndex];\n            s_addressToAmountFunded[funder] = 0;\n        }\n        s_funders = new address[](0);\n        // payable(msg.sender).transfer(address(this).balance);\n        (bool success, ) = i_owner.call{value: address(this).balance}(\"\");\n        require(success, \"Transfer failed\");\n    }\n\n    /**\n        @dev the owner can update the goal whatever he/she want\n     */\n    function updateGoal(uint256 newGoalAsUsd) public onlyOwner {\n        if (newGoalAsUsd > fundingGoal / 10 ** 18) {\n            goalReached = false;\n        }\n        fundingGoal = newGoalAsUsd * 10 ** 18;\n    }\n\n    /**\n        @notice a function for fund() that check if the goal was reached, withdraw the funds\n     */\n    function checkGoalReached() public onlyOwner {\n        if (\n            !goalReached &&\n            address(this).balance.getConversionRate(s_priceFeed) >= fundingGoal\n        ) {\n            goalReached = true;\n            withdraw();\n\n            emit GoalReached(\n                address(this).balance.getConversionRate(s_priceFeed)\n            );\n        }\n    }\n\n    /**\n        @notice this is a part of the withdraw function\n     */\n    function resetFunders() private {\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < s_funders.length;\n            funderIndex++\n        ) {\n            address funder = s_funders[funderIndex];\n            s_addressToAmountFunded[funder] = 0;\n        }\n        s_funders = new address[](0);\n    }\n\n    /** @notice Gets the amount that an address has funded\n     *  @param fundingAddress the address of the funder\n     *  @return the amount funded\n     */\n    function getAddressToAmountFunded(\n        address fundingAddress\n    ) public view returns (uint256) {\n        return s_addressToAmountFunded[fundingAddress];\n    }\n\n    function getVersion() public view returns (uint256) {\n        return s_priceFeed.version();\n    }\n\n    function getFunder(uint256 index) public view returns (address) {\n        return s_funders[index];\n    }\n\n    function getOwner() public view returns (address) {\n        return i_owner;\n    }\n\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\n        return s_priceFeed;\n    }\n\n    function getFundingGoal() public view returns (uint256) {\n        return fundingGoal;\n    }\n\n    function getGoalReached() public view returns (bool) {\n        return goalReached;\n    }\n\n    function getReFund() public view returns (bool) {\n        return s_refunded[_msgSender()];\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    function getPrice(\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\n        // ETH/USD rate in 18 digit\n        return uint256(answer * 10000000000);\n    }\n\n    // 1000000000\n    // call it get fiatConversionRate, since it assumes something about decimals\n    // It wouldn't work for every aggregator\n    function getConversionRate(\n        uint256 ethAmount,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        uint256 ethPrice = getPrice(priceFeed);\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\n        // the actual ETH/USD conversation rate, after adjusting the extra 0s.\n        return ethAmountInUsd;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}