{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "funder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Fund",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "GoalReached",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "funder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Refund",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RefundAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "changeOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkGoalReached",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "customRefund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundingGoal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fundingAddress",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFundingGoal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGoalReached",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReFund",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refundAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newGoalAsUsd",
          "type": "uint256"
        }
      ],
      "name": "updateGoal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8776267fde17827219c9ede62ee0e8c74ad317f9dc33b6c70f707c51615d1010",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "2331548",
    "logsBloom": "0x
    "blockHash": "0x4c4d420e2692a5d5b92aeb61e08e646ac272d36c92d2cdcda70ddff60419981d",
    "transactionHash": "0x8776267fde17827219c9ede62ee0e8c74ad317f9dc33b6c70f707c51615d1010",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "2331548",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "6c1506b18b955b34ba1fe68eaaf9b369",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Fund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"GoalReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefundAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkGoalReached\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"customRefund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingGoal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundingAddress\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundingGoal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGoalReached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newGoalAsUsd\",\"type\":\"uint256\"}],\"name\":\"updateGoal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Patrick Collins\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"changeOwnership(address)\":{\"params\":{\"newOwner\":\"address\"}},\"getAddressToAmountFunded(address)\":{\"params\":{\"fundingAddress\":\"the address of the funder\"},\"returns\":{\"_0\":\"the amount funded\"}},\"refund()\":{\"details\":\"chack that goal does not reached and the msg.sender did not refund befor then refund\"},\"updateGoal(uint256)\":{\"details\":\"the owner can update the goal whatever he/she want\"}},\"title\":\"A sample Funding Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"changeOwnership(address)\":{\"notice\":\"change the ownership\"},\"checkGoalReached()\":{\"notice\":\"a function for fund() that check if the goal was reached, withdraw the funds\"},\"customRefund(uint256)\":{\"notice\":\"refund with custom amount of fund\"},\"fund()\":{\"notice\":\"Funds of our contract based on the ETH/USD price\"},\"getAddressToAmountFunded(address)\":{\"notice\":\"Gets the amount that an address has funded\"},\"refundAll()\":{\"notice\":\"refund all of funds in a loop\"}},\"notice\":\"This contract is for creating a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// 1. Pragma\\npragma solidity ^0.8.7;\\n// 2. Imports\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {PriceConverter} from \\\"./PriceConverter.sol\\\";\\n\\n// 3. Interfaces, Libraries, Contracts\\nerror FundMe__NotOwner();\\n\\n/**@title A sample Funding Contract\\n * @author Patrick Collins\\n * @notice This contract is for creating a sample funding contract\\n * @dev This implements price feeds as our library\\n */\\ncontract FundMe is Context {\\n    // Type Declarations\\n    using PriceConverter for uint256;\\n\\n    // State variables\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\n    uint256 public fundingGoal = 5000 * 10 ** 18;\\n    address private i_owner;\\n    address[] private s_funders;\\n    bool private goalReached;\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    mapping(address => bool) private s_refunded;\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    // Events\\n    event RefundAll(address owner, uint256 amount);\\n    event Withdraw(address owner, uint256 amount);\\n    event Refund(address funder, uint256 amount);\\n    event OwnerChanged(address from, address to);\\n    event Fund(address funder, uint amount);\\n    event GoalReached(uint256 amount);\\n\\n    // Modifiers\\n    modifier onlyOwner() {\\n        // require(msg.sender == i_owner);\\n        if (_msgSender() != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev this modifier is for \\\"refund\\\" and \\\"customRefund\\\" functions\\n     */\\n    modifier refundRequires() {\\n        require(!goalReached, \\\"Refunds are not available\\\");\\n        require(!s_refunded[_msgSender()], \\\"Refund already processed\\\");\\n        require(\\n            s_addressToAmountFunded[_msgSender()] > 0,\\n            \\\"No funds to refund\\\"\\n        );\\n        _;\\n    }\\n\\n    // Functions Order:\\n    //// constructor\\n    //// receive\\n    //// fallback\\n    //// external\\n    //// public\\n    //// internal\\n    //// private\\n    //// view / pure\\n\\n    constructor(address priceFeed) {\\n        s_priceFeed = AggregatorV3Interface(priceFeed);\\n        i_owner = _msgSender();\\n    }\\n\\n    /// @notice Funds of our contract based on the ETH/USD price\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_refunded[_msgSender()] = false;\\n        s_addressToAmountFunded[_msgSender()] += msg.value;\\n        s_funders.push(_msgSender());\\n        emit Fund(_msgSender(), msg.value);\\n\\n        checkGoalReached();\\n    }\\n\\n    /**\\n        @notice change the ownership\\n    *   @param newOwner address\\n    */\\n    function changeOwnership(address newOwner) public onlyOwner {\\n        require(newOwner != address(0), \\\"change owner to zero address\\\");\\n\\n        i_owner = newOwner;\\n\\n        emit OwnerChanged(_msgSender(), newOwner);\\n    }\\n\\n    /**\\n        @dev chack that goal does not reached and the msg.sender did not refund befor then refund\\n    */\\n    function refund() public refundRequires {\\n        uint256 refundAmount = s_addressToAmountFunded[_msgSender()];\\n        s_addressToAmountFunded[_msgSender()] = 0;\\n        s_refunded[_msgSender()] = true;\\n\\n        (bool success, ) = _msgSender().call{value: refundAmount}(\\\"\\\");\\n        require(success, \\\"Transfer failed\\\");\\n\\n        emit Refund(_msgSender(), refundAmount);\\n    }\\n\\n    /**\\n        @notice refund with custom amount of fund\\n    */\\n    function customRefund(uint256 amount) public payable refundRequires {\\n        require(\\n            amount.getConversionRate(s_priceFeed) >= 10 * 10 ** 18,\\n            \\\"you need to choose more fund\\\"\\n        );\\n        require(\\n            amount == s_addressToAmountFunded[_msgSender()],\\n            \\\"please call refund function\\\"\\n        );\\n        s_addressToAmountFunded[_msgSender()] =\\n            s_addressToAmountFunded[_msgSender()] -\\n            amount;\\n        (bool success, ) = _msgSender().call{value: amount}(\\\"\\\");\\n        require(success, \\\"Transfer failed\\\");\\n\\n        emit Refund(_msgSender(), amount);\\n    }\\n\\n    /**\\n        @notice refund all of funds in a loop\\n     */\\n    function refundAll() public onlyOwner {\\n        // for gas optimization\\n        address[] memory funders = s_funders;\\n        // get all of the accounts and refund them\\n        uint256 refundAmount;\\n        for (uint256 i = 0; i < funders.length; i++) {\\n            address funder = funders[i];\\n            if (!s_refunded[funder]) {\\n                uint256 amount = s_addressToAmountFunded[funder];\\n                s_addressToAmountFunded[funder] = 0;\\n                s_refunded[funder] = true;\\n                payable(funder).transfer(amount);\\n\\n                refundAmount += amount;\\n            }\\n        }\\n\\n        emit RefundAll(i_owner, refundAmount);\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        resetFunders();\\n        uint256 contractBalance = address(this).balance;\\n        // Transfer vs call vs Send\\n        // payable(msg.sender).transfer(contractBalance);\\n        (bool success, ) = i_owner.call{value: contractBalance}(\\\"\\\");\\n        require(success, \\\"Transfer failed\\\");\\n        emit Withdraw(i_owner, contractBalance);\\n    }\\n\\n    function cheaperWithdraw() public onlyOwner {\\n        address[] memory funders = s_funders;\\n        // mappings can't be in memory, sorry!\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // payable(msg.sender).transfer(address(this).balance);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success, \\\"Transfer failed\\\");\\n    }\\n\\n    /**\\n        @dev the owner can update the goal whatever he/she want\\n     */\\n    function updateGoal(uint256 newGoalAsUsd) public onlyOwner {\\n        if (newGoalAsUsd > fundingGoal / 10 ** 18) {\\n            goalReached = false;\\n        }\\n        fundingGoal = newGoalAsUsd * 10 ** 18;\\n    }\\n\\n    /**\\n        @notice a function for fund() that check if the goal was reached, withdraw the funds\\n     */\\n    function checkGoalReached() public onlyOwner {\\n        if (\\n            !goalReached &&\\n            address(this).balance.getConversionRate(s_priceFeed) >= fundingGoal\\n        ) {\\n            goalReached = true;\\n            withdraw();\\n\\n            emit GoalReached(\\n                address(this).balance.getConversionRate(s_priceFeed)\\n            );\\n        }\\n    }\\n\\n    /**\\n        @notice this is a part of the withdraw function\\n     */\\n    function resetFunders() private {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n    }\\n\\n    /** @notice Gets the amount that an address has funded\\n     *  @param fundingAddress the address of the funder\\n     *  @return the amount funded\\n     */\\n    function getAddressToAmountFunded(\\n        address fundingAddress\\n    ) public view returns (uint256) {\\n        return s_addressToAmountFunded[fundingAddress];\\n    }\\n\\n    function getVersion() public view returns (uint256) {\\n        return s_priceFeed.version();\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n\\n    function getFundingGoal() public view returns (uint256) {\\n        return fundingGoal;\\n    }\\n\\n    function getGoalReached() public view returns (bool) {\\n        return goalReached;\\n    }\\n\\n    function getReFund() public view returns (bool) {\\n        return s_refunded[_msgSender()];\\n    }\\n}\\n\",\"keccak256\":\"0x0237a3d700fa919acd03b4c972ededda433c0c54be8c709068231ba8cb84f5ae\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n    }\\n\\n    // 1000000000\\n    // call it get fiatConversionRate, since it assumes something about decimals\\n    // It wouldn't work for every aggregator\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // the actual ETH/USD conversation rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x7099e8dc89623f3a65632a47ee079dbe5ae16de99d9faac5dede5181ab783494\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405269010f0cf064dd592000006000553480156200001f57600080fd5b50604051620029a9380380620029a98339818101604052810190620000459190620000fc565b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000096620000dd60201b60201c565b600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000181565b600033905090565b600081519050620000f68162000167565b92915050565b60006020828403121562000115576200011462000162565b5b60006200012584828501620000e5565b91505092915050565b60006200013b8262000142565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b62000172816200012e565b81146200017e57600080fd5b50565b61281880620001916000396000f3fe6080604052600436106101145760003560e01c80636b69a592116100a0578063a68a8a1011610064578063a68a8a1014610331578063b60d42881461034d578063b85090f314610357578063be2693f014610382578063d7b4750c1461039957610114565b80636b69a5921461025a57806373256466146102855780637a3a0e84146102b0578063893d20e8146102db5780639e87a5cd1461030657610114565b80632af4c31e116100e75780632af4c31e146101c3578063316fb7c4146101ec57806338e771ab146102155780633ccfd60b1461022c578063590e1ae31461024357610114565b806301cb3b20146101195780630343fb25146101305780630d8e6e2c1461016d5780631b8df58614610198575b600080fd5b34801561012557600080fd5b5061012e6103d6565b005b34801561013c57600080fd5b5061015760048036038101906101529190611dff565b61054d565b6040516101649190612230565b60405180910390f35b34801561017957600080fd5b50610182610596565b60405161018f9190612230565b60405180910390f35b3480156101a457600080fd5b506101ad61063d565b6040516101ba91906120fa565b60405180910390f35b3480156101cf57600080fd5b506101ea60048036038101906101e59190611dff565b610654565b005b3480156101f857600080fd5b50610213600480360381019061020e9190611e2c565b6107d6565b005b34801561022157600080fd5b5061022a6108ba565b005b34801561023857600080fd5b50610241610c00565b005b34801561024f57600080fd5b50610258610dc8565b005b34801561026657600080fd5b5061026f611122565b60405161027c9190612230565b60405180910390f35b34801561029157600080fd5b5061029a61112f565b6040516102a791906120fa565b60405180910390f35b3480156102bc57600080fd5b506102c561118a565b6040516102d29190612230565b60405180910390f35b3480156102e757600080fd5b506102f0611190565b6040516102fd919061208d565b60405180910390f35b34801561031257600080fd5b5061031b6111ba565b6040516103289190612115565b60405180910390f35b61034b60048036038101906103469190611e2c565b6111e4565b005b6103556115eb565b005b34801561036357600080fd5b5061036c6117db565b6040516103799190612230565b60405180910390f35b34801561038e57600080fd5b506103976117e4565b005b3480156103a557600080fd5b506103c060048036038101906103bb9190611e2c565b611ab4565b6040516103cd919061208d565b60405180910390f35b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610417611afc565b73ffffffffffffffffffffffffffffffffffffffff1614610464576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600360009054906101000a900460ff161580156104b757506000546104b4600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1647611b0490919063ffffffff16565b10155b1561054b576001600360006101000a81548160ff0219169083151502179055506104df610c00565b7ffbfd8ab7c24300fa9888cd721c8565a7da56759384781283684dcf7c7c4a846b610535600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1647611b0490919063ffffffff16565b6040516105429190612230565b60405180910390a15b565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b15801561060057600080fd5b505afa158015610614573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106389190611e59565b905090565b6000600360009054906101000a900460ff16905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610695611afc565b73ffffffffffffffffffffffffffffffffffffffff16146106e2576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610752576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610749906121d0565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c6107bc611afc565b826040516107cb9291906120a8565b60405180910390a150565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610817611afc565b73ffffffffffffffffffffffffffffffffffffffff1614610864576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b670de0b6b3a764000060005461087a91906122bd565b81111561089d576000600360006101000a81548160ff0219169083151502179055505b670de0b6b3a7640000816108b19190612405565b60008190555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fb611afc565b73ffffffffffffffffffffffffffffffffffffffff1614610948576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060028054806020026020016040519081016040528092919081815260200182805480156109cc57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610982575b50505050509050600080600090505b8251811015610ba05760008382815181106109f9576109f86125d8565b5b60200260200101519050600560008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610b8c576000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610b7b573d6000803e3d6000fd5b508084610b889190612267565b9350505b508080610b9890612531565b9150506109db565b507f72d26b7be9dec2454b87b395431330d0da6285c61fcce8598722963a8973f748600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682604051610bf49291906120d1565b60405180910390a15050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610c41611afc565b73ffffffffffffffffffffffffffffffffffffffff1614610c8e576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610c96611b40565b60004790506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1682604051610ce390612078565b60006040518083038185875af1925050503d8060008114610d20576040519150601f19603f3d011682016040523d82523d6000602084013e610d25565b606091505b5050905080610d69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6090612170565b60405180910390fd5b7f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683604051610dbc9291906120d1565b60405180910390a15050565b600360009054906101000a900460ff1615610e18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0f90612150565b60405180910390fd5b60056000610e24611afc565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610eac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea3906121f0565b60405180910390fd5b600060046000610eba611afc565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411610f35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2c906121b0565b60405180910390fd5b600060046000610f43611afc565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600060046000610f8e611afc565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600160056000610fda611afc565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000611035611afc565b73ffffffffffffffffffffffffffffffffffffffff168260405161105890612078565b60006040518083038185875af1925050503d8060008114611095576040519150601f19603f3d011682016040523d82523d6000602084013e61109a565b606091505b50509050806110de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d590612170565b60405180910390fd5b7fbb28353e4598c3b9199101a66e0989549b659a59a54d2c27fbb183f1932c8e6d611107611afc565b836040516111169291906120d1565b60405180910390a15050565b6802b5e3af16b188000081565b60006005600061113d611afc565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905090565b60005481565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600360009054906101000a900460ff1615611234576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122b90612150565b60405180910390fd5b60056000611240611afc565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156112c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112bf906121f0565b60405180910390fd5b6000600460006112d6611afc565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411611351576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611348906121b0565b60405180910390fd5b678ac7230489e8000061138f600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683611b0490919063ffffffff16565b10156113d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113c790612130565b60405180910390fd5b600460006113dc611afc565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548114611458576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161144f90612210565b60405180910390fd5b8060046000611465611afc565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546114aa919061245f565b600460006114b6611afc565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060006114fe611afc565b73ffffffffffffffffffffffffffffffffffffffff168260405161152190612078565b60006040518083038185875af1925050503d806000811461155e576040519150601f19603f3d011682016040523d82523d6000602084013e611563565b606091505b50509050806115a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159e90612170565b60405180910390fd5b7fbb28353e4598c3b9199101a66e0989549b659a59a54d2c27fbb183f1932c8e6d6115d0611afc565b836040516115df9291906120d1565b60405180910390a15050565b6802b5e3af16b188000061162a600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1634611b0490919063ffffffff16565b101561166b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161166290612190565b60405180910390fd5b600060056000611679611afc565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555034600460006116d7611afc565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546117209190612267565b925050819055506002611731611afc565b9080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fda8220a878ff7a89474ccffdaa31ea1ed1ffbb0207d5051afccc4fbaf81f9bcd6117ba611afc565b346040516117c99291906120d1565b60405180910390a16117d96103d6565b565b60008054905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611825611afc565b73ffffffffffffffffffffffffffffffffffffffff1614611872576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060028054806020026020016040519081016040528092919081815260200182805480156118f657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116118ac575b5050505050905060005b815181101561198157600082828151811061191e5761191d6125d8565b5b602002602001015190506000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061197990612531565b915050611900565b50600067ffffffffffffffff81111561199d5761199c612607565b5b6040519080825280602002602001820160405280156119cb5781602001602082028036833780820191505090505b50600290805190602001906119e1929190611cef565b506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1647604051611a2a90612078565b60006040518083038185875af1925050503d8060008114611a67576040519150601f19603f3d011682016040523d82523d6000602084013e611a6c565b606091505b5050905080611ab0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aa790612170565b60405180910390fd5b5050565b600060028281548110611aca57611ac96125d8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600033905090565b600080611b1083611c4f565b90506000670de0b6b3a76400008583611b299190612405565b611b3391906122bd565b9050809250505092915050565b60005b600280549050811015611bec57600060028281548110611b6657611b656125d8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550508080611be490612531565b915050611b43565b50600067ffffffffffffffff811115611c0857611c07612607565b5b604051908082528060200260200182016040528015611c365781602001602082028036833780820191505090505b5060029080519060200190611c4c929190611cef565b50565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015611c9857600080fd5b505afa158015611cac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd09190611e86565b5050509150506402540be40081611ce791906122ee565b915050919050565b828054828255906000526020600020908101928215611d68579160200282015b82811115611d675782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190611d0f565b5b509050611d759190611d79565b5090565b5b80821115611d92576000816000905550600101611d7a565b5090565b600081359050611da581612786565b92915050565b600081519050611dba8161279d565b92915050565b600081359050611dcf816127b4565b92915050565b600081519050611de4816127b4565b92915050565b600081519050611df9816127cb565b92915050565b600060208284031215611e1557611e14612636565b5b6000611e2384828501611d96565b91505092915050565b600060208284031215611e4257611e41612636565b5b6000611e5084828501611dc0565b91505092915050565b600060208284031215611e6f57611e6e612636565b5b6000611e7d84828501611dd5565b91505092915050565b600080600080600060a08688031215611ea257611ea1612636565b5b6000611eb088828901611dea565b9550506020611ec188828901611dab565b9450506040611ed288828901611dd5565b9350506060611ee388828901611dd5565b9250506080611ef488828901611dea565b9150509295509295909350565b611f0a81612493565b82525050565b611f19816124a5565b82525050565b611f28816124fb565b82525050565b6000611f3b601c83612256565b9150611f468261263b565b602082019050919050565b6000611f5e601983612256565b9150611f6982612664565b602082019050919050565b6000611f81600f83612256565b9150611f8c8261268d565b602082019050919050565b6000611fa4601b83612256565b9150611faf826126b6565b602082019050919050565b6000611fc7601283612256565b9150611fd2826126df565b602082019050919050565b6000611fea60008361224b565b9150611ff582612708565b600082019050919050565b600061200d601c83612256565b91506120188261270b565b602082019050919050565b6000612030601883612256565b915061203b82612734565b602082019050919050565b6000612053601b83612256565b915061205e8261275d565b602082019050919050565b612072816124db565b82525050565b600061208382611fdd565b9150819050919050565b60006020820190506120a26000830184611f01565b92915050565b60006040820190506120bd6000830185611f01565b6120ca6020830184611f01565b9392505050565b60006040820190506120e66000830185611f01565b6120f36020830184612069565b9392505050565b600060208201905061210f6000830184611f10565b92915050565b600060208201905061212a6000830184611f1f565b92915050565b6000602082019050818103600083015261214981611f2e565b9050919050565b6000602082019050818103600083015261216981611f51565b9050919050565b6000602082019050818103600083015261218981611f74565b9050919050565b600060208201905081810360008301526121a981611f97565b9050919050565b600060208201905081810360008301526121c981611fba565b9050919050565b600060208201905081810360008301526121e981612000565b9050919050565b6000602082019050818103600083015261220981612023565b9050919050565b6000602082019050818103600083015261222981612046565b9050919050565b60006020820190506122456000830184612069565b92915050565b600081905092915050565b600082825260208201905092915050565b6000612272826124db565b915061227d836124db565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156122b2576122b161257a565b5b828201905092915050565b60006122c8826124db565b91506122d3836124db565b9250826122e3576122e26125a9565b5b828204905092915050565b60006122f9826124b1565b9150612304836124b1565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156123435761234261257a565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156123805761237f61257a565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156123bd576123bc61257a565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156123fa576123f961257a565b5b828202905092915050565b6000612410826124db565b915061241b836124db565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156124545761245361257a565b5b828202905092915050565b600061246a826124db565b9150612475836124db565b9250828210156124885761248761257a565b5b828203905092915050565b600061249e826124bb565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b60006125068261250d565b9050919050565b60006125188261251f565b9050919050565b600061252a826124bb565b9050919050565b600061253c826124db565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561256f5761256e61257a565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f796f75206e65656420746f2063686f6f7365206d6f72652066756e6400000000600082015250565b7f526566756e647320617265206e6f7420617661696c61626c6500000000000000600082015250565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b7f4e6f2066756e647320746f20726566756e640000000000000000000000000000600082015250565b50565b7f6368616e6765206f776e657220746f207a65726f206164647265737300000000600082015250565b7f526566756e6420616c72656164792070726f6365737365640000000000000000600082015250565b7f706c656173652063616c6c20726566756e642066756e6374696f6e0000000000600082015250565b61278f81612493565b811461279a57600080fd5b50565b6127a6816124b1565b81146127b157600080fd5b50565b6127bd816124db565b81146127c857600080fd5b50565b6127d4816124e5565b81146127df57600080fd5b5056fea264697066735822122039c52c6b6e31075e51a56add976c722df24007fcb0f913a0520b1c54023a340e64736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106101145760003560e01c80636b69a592116100a0578063a68a8a1011610064578063a68a8a1014610331578063b60d42881461034d578063b85090f314610357578063be2693f014610382578063d7b4750c1461039957610114565b80636b69a5921461025a57806373256466146102855780637a3a0e84146102b0578063893d20e8146102db5780639e87a5cd1461030657610114565b80632af4c31e116100e75780632af4c31e146101c3578063316fb7c4146101ec57806338e771ab146102155780633ccfd60b1461022c578063590e1ae31461024357610114565b806301cb3b20146101195780630343fb25146101305780630d8e6e2c1461016d5780631b8df58614610198575b600080fd5b34801561012557600080fd5b5061012e6103d6565b005b34801561013c57600080fd5b5061015760048036038101906101529190611dff565b61054d565b6040516101649190612230565b60405180910390f35b34801561017957600080fd5b50610182610596565b60405161018f9190612230565b60405180910390f35b3480156101a457600080fd5b506101ad61063d565b6040516101ba91906120fa565b60405180910390f35b3480156101cf57600080fd5b506101ea60048036038101906101e59190611dff565b610654565b005b3480156101f857600080fd5b50610213600480360381019061020e9190611e2c565b6107d6565b005b34801561022157600080fd5b5061022a6108ba565b005b34801561023857600080fd5b50610241610c00565b005b34801561024f57600080fd5b50610258610dc8565b005b34801561026657600080fd5b5061026f611122565b60405161027c9190612230565b60405180910390f35b34801561029157600080fd5b5061029a61112f565b6040516102a791906120fa565b60405180910390f35b3480156102bc57600080fd5b506102c561118a565b6040516102d29190612230565b60405180910390f35b3480156102e757600080fd5b506102f0611190565b6040516102fd919061208d565b60405180910390f35b34801561031257600080fd5b5061031b6111ba565b6040516103289190612115565b60405180910390f35b61034b60048036038101906103469190611e2c565b6111e4565b005b6103556115eb565b005b34801561036357600080fd5b5061036c6117db565b6040516103799190612230565b60405180910390f35b34801561038e57600080fd5b506103976117e4565b005b3480156103a557600080fd5b506103c060048036038101906103bb9190611e2c565b611ab4565b6040516103cd919061208d565b60405180910390f35b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610417611afc565b73ffffffffffffffffffffffffffffffffffffffff1614610464576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600360009054906101000a900460ff161580156104b757506000546104b4600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1647611b0490919063ffffffff16565b10155b1561054b576001600360006101000a81548160ff0219169083151502179055506104df610c00565b7ffbfd8ab7c24300fa9888cd721c8565a7da56759384781283684dcf7c7c4a846b610535600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1647611b0490919063ffffffff16565b6040516105429190612230565b60405180910390a15b565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b15801561060057600080fd5b505afa158015610614573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106389190611e59565b905090565b6000600360009054906101000a900460ff16905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610695611afc565b73ffffffffffffffffffffffffffffffffffffffff16146106e2576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610752576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610749906121d0565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c6107bc611afc565b826040516107cb9291906120a8565b60405180910390a150565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610817611afc565b73ffffffffffffffffffffffffffffffffffffffff1614610864576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b670de0b6b3a764000060005461087a91906122bd565b81111561089d576000600360006101000a81548160ff0219169083151502179055505b670de0b6b3a7640000816108b19190612405565b60008190555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fb611afc565b73ffffffffffffffffffffffffffffffffffffffff1614610948576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060028054806020026020016040519081016040528092919081815260200182805480156109cc57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610982575b50505050509050600080600090505b8251811015610ba05760008382815181106109f9576109f86125d8565b5b60200260200101519050600560008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610b8c576000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610b7b573d6000803e3d6000fd5b508084610b889190612267565b9350505b508080610b9890612531565b9150506109db565b507f72d26b7be9dec2454b87b395431330d0da6285c61fcce8598722963a8973f748600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682604051610bf49291906120d1565b60405180910390a15050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610c41611afc565b73ffffffffffffffffffffffffffffffffffffffff1614610c8e576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610c96611b40565b60004790506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1682604051610ce390612078565b60006040518083038185875af1925050503d8060008114610d20576040519150601f19603f3d011682016040523d82523d6000602084013e610d25565b606091505b5050905080610d69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6090612170565b60405180910390fd5b7f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683604051610dbc9291906120d1565b60405180910390a15050565b600360009054906101000a900460ff1615610e18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0f90612150565b60405180910390fd5b60056000610e24611afc565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610eac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea3906121f0565b60405180910390fd5b600060046000610eba611afc565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411610f35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2c906121b0565b60405180910390fd5b600060046000610f43611afc565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600060046000610f8e611afc565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600160056000610fda611afc565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000611035611afc565b73ffffffffffffffffffffffffffffffffffffffff168260405161105890612078565b60006040518083038185875af1925050503d8060008114611095576040519150601f19603f3d011682016040523d82523d6000602084013e61109a565b606091505b50509050806110de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d590612170565b60405180910390fd5b7fbb28353e4598c3b9199101a66e0989549b659a59a54d2c27fbb183f1932c8e6d611107611afc565b836040516111169291906120d1565b60405180910390a15050565b6802b5e3af16b188000081565b60006005600061113d611afc565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905090565b60005481565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600360009054906101000a900460ff1615611234576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122b90612150565b60405180910390fd5b60056000611240611afc565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156112c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112bf906121f0565b60405180910390fd5b6000600460006112d6611afc565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411611351576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611348906121b0565b60405180910390fd5b678ac7230489e8000061138f600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683611b0490919063ffffffff16565b10156113d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113c790612130565b60405180910390fd5b600460006113dc611afc565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548114611458576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161144f90612210565b60405180910390fd5b8060046000611465611afc565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546114aa919061245f565b600460006114b6611afc565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060006114fe611afc565b73ffffffffffffffffffffffffffffffffffffffff168260405161152190612078565b60006040518083038185875af1925050503d806000811461155e576040519150601f19603f3d011682016040523d82523d6000602084013e611563565b606091505b50509050806115a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159e90612170565b60405180910390fd5b7fbb28353e4598c3b9199101a66e0989549b659a59a54d2c27fbb183f1932c8e6d6115d0611afc565b836040516115df9291906120d1565b60405180910390a15050565b6802b5e3af16b188000061162a600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1634611b0490919063ffffffff16565b101561166b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161166290612190565b60405180910390fd5b600060056000611679611afc565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555034600460006116d7611afc565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546117209190612267565b925050819055506002611731611afc565b9080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fda8220a878ff7a89474ccffdaa31ea1ed1ffbb0207d5051afccc4fbaf81f9bcd6117ba611afc565b346040516117c99291906120d1565b60405180910390a16117d96103d6565b565b60008054905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611825611afc565b73ffffffffffffffffffffffffffffffffffffffff1614611872576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060028054806020026020016040519081016040528092919081815260200182805480156118f657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116118ac575b5050505050905060005b815181101561198157600082828151811061191e5761191d6125d8565b5b602002602001015190506000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061197990612531565b915050611900565b50600067ffffffffffffffff81111561199d5761199c612607565b5b6040519080825280602002602001820160405280156119cb5781602001602082028036833780820191505090505b50600290805190602001906119e1929190611cef565b506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1647604051611a2a90612078565b60006040518083038185875af1925050503d8060008114611a67576040519150601f19603f3d011682016040523d82523d6000602084013e611a6c565b606091505b5050905080611ab0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aa790612170565b60405180910390fd5b5050565b600060028281548110611aca57611ac96125d8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600033905090565b600080611b1083611c4f565b90506000670de0b6b3a76400008583611b299190612405565b611b3391906122bd565b9050809250505092915050565b60005b600280549050811015611bec57600060028281548110611b6657611b656125d8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550508080611be490612531565b915050611b43565b50600067ffffffffffffffff811115611c0857611c07612607565b5b604051908082528060200260200182016040528015611c365781602001602082028036833780820191505090505b5060029080519060200190611c4c929190611cef565b50565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015611c9857600080fd5b505afa158015611cac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd09190611e86565b5050509150506402540be40081611ce791906122ee565b915050919050565b828054828255906000526020600020908101928215611d68579160200282015b82811115611d675782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190611d0f565b5b509050611d759190611d79565b5090565b5b80821115611d92576000816000905550600101611d7a565b5090565b600081359050611da581612786565b92915050565b600081519050611dba8161279d565b92915050565b600081359050611dcf816127b4565b92915050565b600081519050611de4816127b4565b92915050565b600081519050611df9816127cb565b92915050565b600060208284031215611e1557611e14612636565b5b6000611e2384828501611d96565b91505092915050565b600060208284031215611e4257611e41612636565b5b6000611e5084828501611dc0565b91505092915050565b600060208284031215611e6f57611e6e612636565b5b6000611e7d84828501611dd5565b91505092915050565b600080600080600060a08688031215611ea257611ea1612636565b5b6000611eb088828901611dea565b9550506020611ec188828901611dab565b9450506040611ed288828901611dd5565b9350506060611ee388828901611dd5565b9250506080611ef488828901611dea565b9150509295509295909350565b611f0a81612493565b82525050565b611f19816124a5565b82525050565b611f28816124fb565b82525050565b6000611f3b601c83612256565b9150611f468261263b565b602082019050919050565b6000611f5e601983612256565b9150611f6982612664565b602082019050919050565b6000611f81600f83612256565b9150611f8c8261268d565b602082019050919050565b6000611fa4601b83612256565b9150611faf826126b6565b602082019050919050565b6000611fc7601283612256565b9150611fd2826126df565b602082019050919050565b6000611fea60008361224b565b9150611ff582612708565b600082019050919050565b600061200d601c83612256565b91506120188261270b565b602082019050919050565b6000612030601883612256565b915061203b82612734565b602082019050919050565b6000612053601b83612256565b915061205e8261275d565b602082019050919050565b612072816124db565b82525050565b600061208382611fdd565b9150819050919050565b60006020820190506120a26000830184611f01565b92915050565b60006040820190506120bd6000830185611f01565b6120ca6020830184611f01565b9392505050565b60006040820190506120e66000830185611f01565b6120f36020830184612069565b9392505050565b600060208201905061210f6000830184611f10565b92915050565b600060208201905061212a6000830184611f1f565b92915050565b6000602082019050818103600083015261214981611f2e565b9050919050565b6000602082019050818103600083015261216981611f51565b9050919050565b6000602082019050818103600083015261218981611f74565b9050919050565b600060208201905081810360008301526121a981611f97565b9050919050565b600060208201905081810360008301526121c981611fba565b9050919050565b600060208201905081810360008301526121e981612000565b9050919050565b6000602082019050818103600083015261220981612023565b9050919050565b6000602082019050818103600083015261222981612046565b9050919050565b60006020820190506122456000830184612069565b92915050565b600081905092915050565b600082825260208201905092915050565b6000612272826124db565b915061227d836124db565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156122b2576122b161257a565b5b828201905092915050565b60006122c8826124db565b91506122d3836124db565b9250826122e3576122e26125a9565b5b828204905092915050565b60006122f9826124b1565b9150612304836124b1565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156123435761234261257a565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156123805761237f61257a565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156123bd576123bc61257a565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156123fa576123f961257a565b5b828202905092915050565b6000612410826124db565b915061241b836124db565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156124545761245361257a565b5b828202905092915050565b600061246a826124db565b9150612475836124db565b9250828210156124885761248761257a565b5b828203905092915050565b600061249e826124bb565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b60006125068261250d565b9050919050565b60006125188261251f565b9050919050565b600061252a826124bb565b9050919050565b600061253c826124db565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561256f5761256e61257a565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f796f75206e65656420746f2063686f6f7365206d6f72652066756e6400000000600082015250565b7f526566756e647320617265206e6f7420617661696c61626c6500000000000000600082015250565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b7f4e6f2066756e647320746f20726566756e640000000000000000000000000000600082015250565b50565b7f6368616e6765206f776e657220746f207a65726f206164647265737300000000600082015250565b7f526566756e6420616c72656164792070726f6365737365640000000000000000600082015250565b7f706c656173652063616c6c20726566756e642066756e6374696f6e0000000000600082015250565b61278f81612493565b811461279a57600080fd5b50565b6127a6816124b1565b81146127b157600080fd5b50565b6127bd816124db565b81146127c857600080fd5b50565b6127d4816124e5565b81146127df57600080fd5b5056fea264697066735822122039c52c6b6e31075e51a56add976c722df24007fcb0f913a0520b1c54023a340e64736f6c63430008070033",
  "devdoc": {
    "author": "Patrick Collins",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "changeOwnership(address)": {
        "params": {
          "newOwner": "address"
        }
      },
      "getAddressToAmountFunded(address)": {
        "params": {
          "fundingAddress": "the address of the funder"
        },
        "returns": {
          "_0": "the amount funded"
        }
      },
      "refund()": {
        "details": "chack that goal does not reached and the msg.sender did not refund befor then refund"
      },
      "updateGoal(uint256)": {
        "details": "the owner can update the goal whatever he/she want"
      }
    },
    "title": "A sample Funding Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "changeOwnership(address)": {
        "notice": "change the ownership"
      },
      "checkGoalReached()": {
        "notice": "a function for fund() that check if the goal was reached, withdraw the funds"
      },
      "customRefund(uint256)": {
        "notice": "refund with custom amount of fund"
      },
      "fund()": {
        "notice": "Funds of our contract based on the ETH/USD price"
      },
      "getAddressToAmountFunded(address)": {
        "notice": "Gets the amount that an address has funded"
      },
      "refundAll()": {
        "notice": "refund all of funds in a loop"
      }
    },
    "notice": "This contract is for creating a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 97,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "fundingGoal",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 99,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "i_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 102,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 104,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "goalReached",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 108,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 112,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_refunded",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 115,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}