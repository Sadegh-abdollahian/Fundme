{
  "address": "0x74B66b04Ce8cC68615d5B7f8363796Fc23Df9A44",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "funder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Fund",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "GoalReached",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "funder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Refund",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RefundAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkGoalReached",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundingGoal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fundingAddress",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFundingGoal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGoalReached",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReFund",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refundAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newGoalAsUsd",
          "type": "uint256"
        }
      ],
      "name": "updateGoal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x27a5fd02ce3ab6143eb0d82a2e0b004e1847314d4d3328cf6e6acdec45946ccc",
  "receipt": {
    "to": null,
    "from": "0x79fd1b791059c7069BED26d0DaA82069b446be27",
    "contractAddress": "0x74B66b04Ce8cC68615d5B7f8363796Fc23Df9A44",
    "transactionIndex": 9,
    "gasUsed": "1852301",
    "logsBloom": "0x
    "blockHash": "0x6007f47f66c61a38e90fe0321b25615308883f01772b4cf51e39744ba6e8f03a",
    "transactionHash": "0x27a5fd02ce3ab6143eb0d82a2e0b004e1847314d4d3328cf6e6acdec45946ccc",
    "logs": [],
    "blockNumber": 4224786,
    "cumulativeGasUsed": "3851881",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x694AA1769357215DE4FAC081bf1f309aDC325306"
  ],
  "numDeployments": 2,
  "solcInputHash": "44c1c8bcbe3af5c496af4b8956593141",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Fund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"GoalReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefundAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkGoalReached\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingGoal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundingAddress\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundingGoal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGoalReached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newGoalAsUsd\",\"type\":\"uint256\"}],\"name\":\"updateGoal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Patrick Collins\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"getAddressToAmountFunded(address)\":{\"params\":{\"fundingAddress\":\"the address of the funder\"},\"returns\":{\"_0\":\"the amount funded\"}}},\"title\":\"A sample Funding Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"Funds our contract based on the ETH/USD price\"},\"getAddressToAmountFunded(address)\":{\"notice\":\"Gets the amount that an address has funded\"}},\"notice\":\"This contract is for creating a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// 1. Pragma\\npragma solidity ^0.8.7;\\n// 2. Imports\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {PriceConverter} from \\\"./PriceConverter.sol\\\";\\n\\n// 3. Interfaces, Libraries, Contracts\\nerror FundMe__NotOwner();\\n\\n/**@title A sample Funding Contract\\n * @author Patrick Collins\\n * @notice This contract is for creating a sample funding contract\\n * @dev This implements price feeds as our library\\n */\\ncontract FundMe is Context {\\n    // Type Declarations\\n    using PriceConverter for uint256;\\n\\n    // State variables\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\n    uint256 public fundingGoal = 5000 * 10 ** 18;\\n    address private immutable i_owner;\\n    address[] private s_funders;\\n    bool private goalReached;\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    mapping(address => bool) private s_refunded;\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    // Events (we have none!)\\n    event RefundAll(address owner, uint256 amount);\\n    event Withdraw(address owner, uint256 amount);\\n    event Refund(address funder, uint256 amount);\\n    event Fund(address funder, uint amount);\\n    event GoalReached(uint256 amount);\\n\\n    // Modifiers\\n    modifier onlyOwner() {\\n        // require(msg.sender == i_owner);\\n        if (_msgSender() != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    // Functions Order:\\n    //// constructor\\n    //// receive\\n    //// fallback\\n    //// external\\n    //// public\\n    //// internal\\n    //// private\\n    //// view / pure\\n\\n    constructor(address priceFeed) {\\n        s_priceFeed = AggregatorV3Interface(priceFeed);\\n        i_owner = _msgSender();\\n    }\\n\\n    /// @notice Funds our contract based on the ETH/USD price\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_refunded[_msgSender()] = false;\\n        s_addressToAmountFunded[_msgSender()] += msg.value;\\n        s_funders.push(_msgSender());\\n        emit Fund(_msgSender(), msg.value);\\n\\n        checkGoalReached();\\n    }\\n\\n    function refund() public {\\n        require(!goalReached, \\\"Refunds are not available\\\");\\n        require(!s_refunded[_msgSender()], \\\"Refund already processed\\\");\\n        require(\\n            s_addressToAmountFunded[_msgSender()] > 0,\\n            \\\"No funds to refund\\\"\\n        );\\n\\n        uint256 refundAmount = s_addressToAmountFunded[_msgSender()];\\n        s_addressToAmountFunded[_msgSender()] = 0;\\n        s_refunded[_msgSender()] = true;\\n        (bool success, ) = _msgSender().call{value: refundAmount}(\\\"\\\");\\n        require(success, \\\"Transfer failed\\\");\\n\\n        emit Refund(_msgSender(), refundAmount);\\n    }\\n\\n    // refund with custom number of refund\\n\\n    function refundAll() public onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            if (!s_refunded[funder]) {\\n                uint256 refundAmount = s_addressToAmountFunded[funder];\\n                s_addressToAmountFunded[funder] = 0;\\n                s_refunded[funder] = true;\\n                payable(funder).transfer(refundAmount);\\n\\n                emit RefundAll(i_owner, refundAmount);\\n            }\\n        }\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        resetFunders();\\n        uint256 contractBalance = address(this).balance;\\n        // Transfer vs call vs Send\\n        // payable(msg.sender).transfer(contractBalance);\\n        (bool success, ) = i_owner.call{value: contractBalance}(\\\"\\\");\\n        require(success, \\\"Transfer failed\\\");\\n        emit Withdraw(i_owner, contractBalance);\\n    }\\n\\n    function cheaperWithdraw() public onlyOwner {\\n        address[] memory funders = s_funders;\\n        // mappings can't be in memory, sorry!\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // payable(msg.sender).transfer(address(this).balance);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success, \\\"Transfer failed\\\");\\n    }\\n\\n    function updateGoal(uint256 newGoalAsUsd) public onlyOwner {\\n        fundingGoal = newGoalAsUsd * 10 ** 18;\\n    }\\n\\n    function checkGoalReached() public onlyOwner {\\n        if (\\n            !goalReached &&\\n            address(this).balance.getConversionRate(s_priceFeed) >= fundingGoal\\n        ) {\\n            goalReached = true;\\n            withdraw();\\n\\n            emit GoalReached(\\n                address(this).balance.getConversionRate(s_priceFeed)\\n            );\\n        }\\n    }\\n\\n    function resetFunders() private {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n    }\\n\\n    /** @notice Gets the amount that an address has funded\\n     *  @param fundingAddress the address of the funder\\n     *  @return the amount funded\\n     */\\n    function getAddressToAmountFunded(\\n        address fundingAddress\\n    ) public view returns (uint256) {\\n        return s_addressToAmountFunded[fundingAddress];\\n    }\\n\\n    function getVersion() public view returns (uint256) {\\n        return s_priceFeed.version();\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n\\n    function getFundingGoal() public view returns (uint256) {\\n        return fundingGoal;\\n    }\\n\\n    function getGoalReached() public view returns (bool) {\\n        return goalReached;\\n    }\\n\\n    function getReFund() public view returns (bool) {\\n        return s_refunded[_msgSender()];\\n    }\\n}\\n\",\"keccak256\":\"0xf40b5f17f039ca00606f118d6dc56329ddbc8d1b3b5d0a6b54d884e535d04e1f\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport { AggregatorV3Interface } from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n    }\\n\\n    // 1000000000\\n    // call it get fiatConversionRate, since it assumes something about decimals\\n    // It wouldn't work for every aggregator\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // the actual ETH/USD conversation rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x9d2729f351e0742e5c9a949a94620d8563aa2ea2c446a3d4d57f9139d436599e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405269010f0cf064dd592000006000553480156200001f57600080fd5b50604051620021a3380380620021a38339818101604052810190620000459190620000f2565b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000096620000d360201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250505062000177565b600033905090565b600081519050620000ec816200015d565b92915050565b6000602082840312156200010b576200010a62000158565b5b60006200011b84828501620000db565b91505092915050565b6000620001318262000138565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b620001688162000124565b81146200017457600080fd5b50565b60805160601c611fce620001d56000396000818161037d015281816105f9015281816106a20152818161091b0152818161096c01528181610a0701528181610af201528181610ef801528181611141015261133f0152611fce6000f3fe6080604052600436106100fe5760003560e01c80636b69a592116100955780639e87a5cd116100645780639e87a5cd146102c7578063b60d4288146102f2578063b85090f3146102fc578063be2693f014610327578063d7b4750c1461033e576100fe565b80636b69a5921461021b57806373256466146102465780637a3a0e8414610271578063893d20e81461029c576100fe565b8063316fb7c4116100d1578063316fb7c4146101ad57806338e771ab146101d65780633ccfd60b146101ed578063590e1ae314610204576100fe565b806301cb3b20146101035780630343fb251461011a5780630d8e6e2c146101575780631b8df58614610182575b600080fd5b34801561010f57600080fd5b5061011861037b565b005b34801561012657600080fd5b50610141600480360381019061013c9190611756565b6104f0565b60405161014e9190611a95565b60405180910390f35b34801561016357600080fd5b5061016c610539565b6040516101799190611a95565b60405180910390f35b34801561018e57600080fd5b506101976105e0565b6040516101a491906119bf565b60405180910390f35b3480156101b957600080fd5b506101d460048036038101906101cf9190611783565b6105f7565b005b3480156101e257600080fd5b506101eb6106a0565b005b3480156101f957600080fd5b5061020261096a565b005b34801561021057600080fd5b50610219610b2c565b005b34801561022757600080fd5b50610230610e86565b60405161023d9190611a95565b60405180910390f35b34801561025257600080fd5b5061025b610e93565b60405161026891906119bf565b60405180910390f35b34801561027d57600080fd5b50610286610eee565b6040516102939190611a95565b60405180910390f35b3480156102a857600080fd5b506102b1610ef4565b6040516102be919061197b565b60405180910390f35b3480156102d357600080fd5b506102dc610f1c565b6040516102e991906119da565b60405180910390f35b6102fa610f46565b005b34801561030857600080fd5b50610311611136565b60405161031e9190611a95565b60405180910390f35b34801561033357600080fd5b5061033c61113f565b005b34801561034a57600080fd5b5061036560048036038101906103609190611783565b61140b565b604051610372919061197b565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166103ba611453565b73ffffffffffffffffffffffffffffffffffffffff1614610407576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260009054906101000a900460ff1615801561045a5750600054610457600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff164761145b90919063ffffffff16565b10155b156104ee576001600260006101000a81548160ff02191690831515021790555061048261096a565b7ffbfd8ab7c24300fa9888cd721c8565a7da56759384781283684dcf7c7c4a846b6104d8600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff164761145b90919063ffffffff16565b6040516104e59190611a95565b60405180910390a15b565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b1580156105a357600080fd5b505afa1580156105b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105db91906117b0565b905090565b6000600260009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610636611453565b73ffffffffffffffffffffffffffffffffffffffff1614610683576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b670de0b6b3a7640000816106979190611c6a565b60008190555050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166106df611453565b73ffffffffffffffffffffffffffffffffffffffff161461072c576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156109675760006001828154811061075257610751611e09565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610953576000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156108f7573d6000803e3d6000fd5b507f72d26b7be9dec2454b87b395431330d0da6285c61fcce8598722963a8973f7487f000000000000000000000000000000000000000000000000000000000000000082604051610949929190611996565b60405180910390a1505b50808061095f90611d62565b91505061072f565b50565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166109a9611453565b73ffffffffffffffffffffffffffffffffffffffff16146109f6576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109fe611497565b600047905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1682604051610a4990611966565b60006040518083038185875af1925050503d8060008114610a86576040519150601f19603f3d011682016040523d82523d6000602084013e610a8b565b606091505b5050905080610acf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac690611a15565b60405180910390fd5b7f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243647f000000000000000000000000000000000000000000000000000000000000000083604051610b20929190611996565b60405180910390a15050565b600260009054906101000a900460ff1615610b7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b73906119f5565b60405180910390fd5b60046000610b88611453565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610c10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0790611a75565b60405180910390fd5b600060036000610c1e611453565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411610c99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9090611a55565b60405180910390fd5b600060036000610ca7611453565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600060036000610cf2611453565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600160046000610d3e611453565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000610d99611453565b73ffffffffffffffffffffffffffffffffffffffff1682604051610dbc90611966565b60006040518083038185875af1925050503d8060008114610df9576040519150601f19603f3d011682016040523d82523d6000602084013e610dfe565b606091505b5050905080610e42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3990611a15565b60405180910390fd5b7fbb28353e4598c3b9199101a66e0989549b659a59a54d2c27fbb183f1932c8e6d610e6b611453565b83604051610e7a929190611996565b60405180910390a15050565b6802b5e3af16b188000081565b600060046000610ea1611453565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905090565b60005481565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b1880000610f85600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461145b90919063ffffffff16565b1015610fc6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fbd90611a35565b60405180910390fd5b600060046000610fd4611453565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055503460036000611032611453565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461107b9190611acc565b92505081905550600161108c611453565b9080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fda8220a878ff7a89474ccffdaa31ea1ed1ffbb0207d5051afccc4fbaf81f9bcd611115611453565b34604051611124929190611996565b60405180910390a161113461037b565b565b60008054905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661117e611453565b73ffffffffffffffffffffffffffffffffffffffff16146111cb576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561124f57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611205575b5050505050905060005b81518110156112da57600082828151811061127757611276611e09565b5b602002602001015190506000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806112d290611d62565b915050611259565b50600067ffffffffffffffff8111156112f6576112f5611e38565b5b6040519080825280602002602001820160405280156113245781602001602082028036833780820191505090505b506001908051906020019061133a929190611646565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161138190611966565b60006040518083038185875af1925050503d80600081146113be576040519150601f19603f3d011682016040523d82523d6000602084013e6113c3565b606091505b5050905080611407576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113fe90611a15565b60405180910390fd5b5050565b60006001828154811061142157611420611e09565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600033905090565b600080611467836115a6565b90506000670de0b6b3a764000085836114809190611c6a565b61148a9190611b22565b9050809250505092915050565b60005b600180549050811015611543576000600182815481106114bd576114bc611e09565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061153b90611d62565b91505061149a565b50600067ffffffffffffffff81111561155f5761155e611e38565b5b60405190808252806020026020018201604052801561158d5781602001602082028036833780820191505090505b50600190805190602001906115a3929190611646565b50565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156115ef57600080fd5b505afa158015611603573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061162791906117dd565b5050509150506402540be4008161163e9190611b53565b915050919050565b8280548282559060005260206000209081019282156116bf579160200282015b828111156116be5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190611666565b5b5090506116cc91906116d0565b5090565b5b808211156116e95760008160009055506001016116d1565b5090565b6000813590506116fc81611f3c565b92915050565b60008151905061171181611f53565b92915050565b60008135905061172681611f6a565b92915050565b60008151905061173b81611f6a565b92915050565b60008151905061175081611f81565b92915050565b60006020828403121561176c5761176b611e67565b5b600061177a848285016116ed565b91505092915050565b60006020828403121561179957611798611e67565b5b60006117a784828501611717565b91505092915050565b6000602082840312156117c6576117c5611e67565b5b60006117d48482850161172c565b91505092915050565b600080600080600060a086880312156117f9576117f8611e67565b5b600061180788828901611741565b955050602061181888828901611702565b94505060406118298882890161172c565b935050606061183a8882890161172c565b925050608061184b88828901611741565b9150509295509295909350565b61186181611cc4565b82525050565b61187081611cd6565b82525050565b61187f81611d2c565b82525050565b6000611892601983611abb565b915061189d82611e6c565b602082019050919050565b60006118b5600f83611abb565b91506118c082611e95565b602082019050919050565b60006118d8601b83611abb565b91506118e382611ebe565b602082019050919050565b60006118fb601283611abb565b915061190682611ee7565b602082019050919050565b600061191e600083611ab0565b915061192982611f10565b600082019050919050565b6000611941601883611abb565b915061194c82611f13565b602082019050919050565b61196081611d0c565b82525050565b600061197182611911565b9150819050919050565b60006020820190506119906000830184611858565b92915050565b60006040820190506119ab6000830185611858565b6119b86020830184611957565b9392505050565b60006020820190506119d46000830184611867565b92915050565b60006020820190506119ef6000830184611876565b92915050565b60006020820190508181036000830152611a0e81611885565b9050919050565b60006020820190508181036000830152611a2e816118a8565b9050919050565b60006020820190508181036000830152611a4e816118cb565b9050919050565b60006020820190508181036000830152611a6e816118ee565b9050919050565b60006020820190508181036000830152611a8e81611934565b9050919050565b6000602082019050611aaa6000830184611957565b92915050565b600081905092915050565b600082825260208201905092915050565b6000611ad782611d0c565b9150611ae283611d0c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611b1757611b16611dab565b5b828201905092915050565b6000611b2d82611d0c565b9150611b3883611d0c565b925082611b4857611b47611dda565b5b828204905092915050565b6000611b5e82611ce2565b9150611b6983611ce2565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615611ba857611ba7611dab565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615611be557611be4611dab565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615611c2257611c21611dab565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615611c5f57611c5e611dab565b5b828202905092915050565b6000611c7582611d0c565b9150611c8083611d0c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611cb957611cb8611dab565b5b828202905092915050565b6000611ccf82611cec565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000611d3782611d3e565b9050919050565b6000611d4982611d50565b9050919050565b6000611d5b82611cec565b9050919050565b6000611d6d82611d0c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611da057611d9f611dab565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f526566756e647320617265206e6f7420617661696c61626c6500000000000000600082015250565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b7f4e6f2066756e647320746f20726566756e640000000000000000000000000000600082015250565b50565b7f526566756e6420616c72656164792070726f6365737365640000000000000000600082015250565b611f4581611cc4565b8114611f5057600080fd5b50565b611f5c81611ce2565b8114611f6757600080fd5b50565b611f7381611d0c565b8114611f7e57600080fd5b50565b611f8a81611d16565b8114611f9557600080fd5b5056fea26469706673582212205c249fda7a14b257dfb173487917188c236617a303c07f2ca1daf26bd724223864736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100fe5760003560e01c80636b69a592116100955780639e87a5cd116100645780639e87a5cd146102c7578063b60d4288146102f2578063b85090f3146102fc578063be2693f014610327578063d7b4750c1461033e576100fe565b80636b69a5921461021b57806373256466146102465780637a3a0e8414610271578063893d20e81461029c576100fe565b8063316fb7c4116100d1578063316fb7c4146101ad57806338e771ab146101d65780633ccfd60b146101ed578063590e1ae314610204576100fe565b806301cb3b20146101035780630343fb251461011a5780630d8e6e2c146101575780631b8df58614610182575b600080fd5b34801561010f57600080fd5b5061011861037b565b005b34801561012657600080fd5b50610141600480360381019061013c9190611756565b6104f0565b60405161014e9190611a95565b60405180910390f35b34801561016357600080fd5b5061016c610539565b6040516101799190611a95565b60405180910390f35b34801561018e57600080fd5b506101976105e0565b6040516101a491906119bf565b60405180910390f35b3480156101b957600080fd5b506101d460048036038101906101cf9190611783565b6105f7565b005b3480156101e257600080fd5b506101eb6106a0565b005b3480156101f957600080fd5b5061020261096a565b005b34801561021057600080fd5b50610219610b2c565b005b34801561022757600080fd5b50610230610e86565b60405161023d9190611a95565b60405180910390f35b34801561025257600080fd5b5061025b610e93565b60405161026891906119bf565b60405180910390f35b34801561027d57600080fd5b50610286610eee565b6040516102939190611a95565b60405180910390f35b3480156102a857600080fd5b506102b1610ef4565b6040516102be919061197b565b60405180910390f35b3480156102d357600080fd5b506102dc610f1c565b6040516102e991906119da565b60405180910390f35b6102fa610f46565b005b34801561030857600080fd5b50610311611136565b60405161031e9190611a95565b60405180910390f35b34801561033357600080fd5b5061033c61113f565b005b34801561034a57600080fd5b5061036560048036038101906103609190611783565b61140b565b604051610372919061197b565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166103ba611453565b73ffffffffffffffffffffffffffffffffffffffff1614610407576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260009054906101000a900460ff1615801561045a5750600054610457600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff164761145b90919063ffffffff16565b10155b156104ee576001600260006101000a81548160ff02191690831515021790555061048261096a565b7ffbfd8ab7c24300fa9888cd721c8565a7da56759384781283684dcf7c7c4a846b6104d8600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff164761145b90919063ffffffff16565b6040516104e59190611a95565b60405180910390a15b565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b1580156105a357600080fd5b505afa1580156105b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105db91906117b0565b905090565b6000600260009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610636611453565b73ffffffffffffffffffffffffffffffffffffffff1614610683576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b670de0b6b3a7640000816106979190611c6a565b60008190555050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166106df611453565b73ffffffffffffffffffffffffffffffffffffffff161461072c576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156109675760006001828154811061075257610751611e09565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610953576000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156108f7573d6000803e3d6000fd5b507f72d26b7be9dec2454b87b395431330d0da6285c61fcce8598722963a8973f7487f000000000000000000000000000000000000000000000000000000000000000082604051610949929190611996565b60405180910390a1505b50808061095f90611d62565b91505061072f565b50565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166109a9611453565b73ffffffffffffffffffffffffffffffffffffffff16146109f6576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109fe611497565b600047905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1682604051610a4990611966565b60006040518083038185875af1925050503d8060008114610a86576040519150601f19603f3d011682016040523d82523d6000602084013e610a8b565b606091505b5050905080610acf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac690611a15565b60405180910390fd5b7f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243647f000000000000000000000000000000000000000000000000000000000000000083604051610b20929190611996565b60405180910390a15050565b600260009054906101000a900460ff1615610b7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b73906119f5565b60405180910390fd5b60046000610b88611453565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610c10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0790611a75565b60405180910390fd5b600060036000610c1e611453565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411610c99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9090611a55565b60405180910390fd5b600060036000610ca7611453565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600060036000610cf2611453565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600160046000610d3e611453565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000610d99611453565b73ffffffffffffffffffffffffffffffffffffffff1682604051610dbc90611966565b60006040518083038185875af1925050503d8060008114610df9576040519150601f19603f3d011682016040523d82523d6000602084013e610dfe565b606091505b5050905080610e42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3990611a15565b60405180910390fd5b7fbb28353e4598c3b9199101a66e0989549b659a59a54d2c27fbb183f1932c8e6d610e6b611453565b83604051610e7a929190611996565b60405180910390a15050565b6802b5e3af16b188000081565b600060046000610ea1611453565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905090565b60005481565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b1880000610f85600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461145b90919063ffffffff16565b1015610fc6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fbd90611a35565b60405180910390fd5b600060046000610fd4611453565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055503460036000611032611453565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461107b9190611acc565b92505081905550600161108c611453565b9080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fda8220a878ff7a89474ccffdaa31ea1ed1ffbb0207d5051afccc4fbaf81f9bcd611115611453565b34604051611124929190611996565b60405180910390a161113461037b565b565b60008054905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661117e611453565b73ffffffffffffffffffffffffffffffffffffffff16146111cb576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561124f57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611205575b5050505050905060005b81518110156112da57600082828151811061127757611276611e09565b5b602002602001015190506000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806112d290611d62565b915050611259565b50600067ffffffffffffffff8111156112f6576112f5611e38565b5b6040519080825280602002602001820160405280156113245781602001602082028036833780820191505090505b506001908051906020019061133a929190611646565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161138190611966565b60006040518083038185875af1925050503d80600081146113be576040519150601f19603f3d011682016040523d82523d6000602084013e6113c3565b606091505b5050905080611407576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113fe90611a15565b60405180910390fd5b5050565b60006001828154811061142157611420611e09565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600033905090565b600080611467836115a6565b90506000670de0b6b3a764000085836114809190611c6a565b61148a9190611b22565b9050809250505092915050565b60005b600180549050811015611543576000600182815481106114bd576114bc611e09565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061153b90611d62565b91505061149a565b50600067ffffffffffffffff81111561155f5761155e611e38565b5b60405190808252806020026020018201604052801561158d5781602001602082028036833780820191505090505b50600190805190602001906115a3929190611646565b50565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156115ef57600080fd5b505afa158015611603573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061162791906117dd565b5050509150506402540be4008161163e9190611b53565b915050919050565b8280548282559060005260206000209081019282156116bf579160200282015b828111156116be5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190611666565b5b5090506116cc91906116d0565b5090565b5b808211156116e95760008160009055506001016116d1565b5090565b6000813590506116fc81611f3c565b92915050565b60008151905061171181611f53565b92915050565b60008135905061172681611f6a565b92915050565b60008151905061173b81611f6a565b92915050565b60008151905061175081611f81565b92915050565b60006020828403121561176c5761176b611e67565b5b600061177a848285016116ed565b91505092915050565b60006020828403121561179957611798611e67565b5b60006117a784828501611717565b91505092915050565b6000602082840312156117c6576117c5611e67565b5b60006117d48482850161172c565b91505092915050565b600080600080600060a086880312156117f9576117f8611e67565b5b600061180788828901611741565b955050602061181888828901611702565b94505060406118298882890161172c565b935050606061183a8882890161172c565b925050608061184b88828901611741565b9150509295509295909350565b61186181611cc4565b82525050565b61187081611cd6565b82525050565b61187f81611d2c565b82525050565b6000611892601983611abb565b915061189d82611e6c565b602082019050919050565b60006118b5600f83611abb565b91506118c082611e95565b602082019050919050565b60006118d8601b83611abb565b91506118e382611ebe565b602082019050919050565b60006118fb601283611abb565b915061190682611ee7565b602082019050919050565b600061191e600083611ab0565b915061192982611f10565b600082019050919050565b6000611941601883611abb565b915061194c82611f13565b602082019050919050565b61196081611d0c565b82525050565b600061197182611911565b9150819050919050565b60006020820190506119906000830184611858565b92915050565b60006040820190506119ab6000830185611858565b6119b86020830184611957565b9392505050565b60006020820190506119d46000830184611867565b92915050565b60006020820190506119ef6000830184611876565b92915050565b60006020820190508181036000830152611a0e81611885565b9050919050565b60006020820190508181036000830152611a2e816118a8565b9050919050565b60006020820190508181036000830152611a4e816118cb565b9050919050565b60006020820190508181036000830152611a6e816118ee565b9050919050565b60006020820190508181036000830152611a8e81611934565b9050919050565b6000602082019050611aaa6000830184611957565b92915050565b600081905092915050565b600082825260208201905092915050565b6000611ad782611d0c565b9150611ae283611d0c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611b1757611b16611dab565b5b828201905092915050565b6000611b2d82611d0c565b9150611b3883611d0c565b925082611b4857611b47611dda565b5b828204905092915050565b6000611b5e82611ce2565b9150611b6983611ce2565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615611ba857611ba7611dab565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615611be557611be4611dab565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615611c2257611c21611dab565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615611c5f57611c5e611dab565b5b828202905092915050565b6000611c7582611d0c565b9150611c8083611d0c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611cb957611cb8611dab565b5b828202905092915050565b6000611ccf82611cec565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000611d3782611d3e565b9050919050565b6000611d4982611d50565b9050919050565b6000611d5b82611cec565b9050919050565b6000611d6d82611d0c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611da057611d9f611dab565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f526566756e647320617265206e6f7420617661696c61626c6500000000000000600082015250565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b7f4e6f2066756e647320746f20726566756e640000000000000000000000000000600082015250565b50565b7f526566756e6420616c72656164792070726f6365737365640000000000000000600082015250565b611f4581611cc4565b8114611f5057600080fd5b50565b611f5c81611ce2565b8114611f6757600080fd5b50565b611f7381611d0c565b8114611f7e57600080fd5b50565b611f8a81611d16565b8114611f9557600080fd5b5056fea26469706673582212205c249fda7a14b257dfb173487917188c236617a303c07f2ca1daf26bd724223864736f6c63430008070033",
  "devdoc": {
    "author": "Patrick Collins",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "getAddressToAmountFunded(address)": {
        "params": {
          "fundingAddress": "the address of the funder"
        },
        "returns": {
          "_0": "the amount funded"
        }
      }
    },
    "title": "A sample Funding Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "Funds our contract based on the ETH/USD price"
      },
      "getAddressToAmountFunded(address)": {
        "notice": "Gets the amount that an address has funded"
      }
    },
    "notice": "This contract is for creating a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 97,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "fundingGoal",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 102,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 104,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "goalReached",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 108,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 112,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_refunded",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 115,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}